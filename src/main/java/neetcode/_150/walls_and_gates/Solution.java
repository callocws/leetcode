package neetcode._150.walls_and_gates;

import java.util.Arrays;

// Islands and Treasure
// Walls And Gates
class Solution {
    public void islandsAndTreasure(int[][] grid) {
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 0) {
                    traverse(grid, i, j, 0);
                }
            }
        }
    }

    void traverse(int[][] A, int i, int j, int n) {
        if(i < 0 || j < 0 || i >= A.length || j >= A[0].length || A[i][j] == -1) {
            return;
        }
        if (A[i][j] < n) {
            return;
        }
        
        int t = Math.min(A[i][j], n);
        A[i][j] = -1;
        n++;
        traverse(A, i - 1, j, n);
        traverse(A, i, j - 1, n);
        traverse(A, i + 1, j, n);
        traverse(A, i, j + 1, n);
        A[i][j] = t;
    }

    public static void main(String[] args) {
        int[][] grid = {
            {0, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {-1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1},
            {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
            {0, -1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647}
        };

        Solution s = new Solution();
        s.islandsAndTreasure(grid);
        System.out.println(Arrays.deepToString(grid));
    }

}